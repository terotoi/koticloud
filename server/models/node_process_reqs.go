// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NodeProcessReq is an object representing the database table.
type NodeProcessReq struct {
	ID           int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	NodeID       int    `boil:"node_id" json:"node_id" toml:"node_id" yaml:"node_id"`
	Path         string `boil:"path" json:"path" toml:"path" yaml:"path"`
	RemoveUpload bool   `boil:"remove_upload" json:"remove_upload" toml:"remove_upload" yaml:"remove_upload"`

	R *nodeProcessReqR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodeProcessReqL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodeProcessReqColumns = struct {
	ID           string
	NodeID       string
	Path         string
	RemoveUpload string
}{
	ID:           "id",
	NodeID:       "node_id",
	Path:         "path",
	RemoveUpload: "remove_upload",
}

var NodeProcessReqTableColumns = struct {
	ID           string
	NodeID       string
	Path         string
	RemoveUpload string
}{
	ID:           "node_process_reqs.id",
	NodeID:       "node_process_reqs.node_id",
	Path:         "node_process_reqs.path",
	RemoveUpload: "node_process_reqs.remove_upload",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var NodeProcessReqWhere = struct {
	ID           whereHelperint
	NodeID       whereHelperint
	Path         whereHelperstring
	RemoveUpload whereHelperbool
}{
	ID:           whereHelperint{field: "\"node_process_reqs\".\"id\""},
	NodeID:       whereHelperint{field: "\"node_process_reqs\".\"node_id\""},
	Path:         whereHelperstring{field: "\"node_process_reqs\".\"path\""},
	RemoveUpload: whereHelperbool{field: "\"node_process_reqs\".\"remove_upload\""},
}

// NodeProcessReqRels is where relationship names are stored.
var NodeProcessReqRels = struct {
	Node string
}{
	Node: "Node",
}

// nodeProcessReqR is where relationships are stored.
type nodeProcessReqR struct {
	Node *Node `boil:"Node" json:"Node" toml:"Node" yaml:"Node"`
}

// NewStruct creates a new relationship struct
func (*nodeProcessReqR) NewStruct() *nodeProcessReqR {
	return &nodeProcessReqR{}
}

// nodeProcessReqL is where Load methods for each relationship are stored.
type nodeProcessReqL struct{}

var (
	nodeProcessReqAllColumns            = []string{"id", "node_id", "path", "remove_upload"}
	nodeProcessReqColumnsWithoutDefault = []string{"node_id", "path"}
	nodeProcessReqColumnsWithDefault    = []string{"id", "remove_upload"}
	nodeProcessReqPrimaryKeyColumns     = []string{"id"}
)

type (
	// NodeProcessReqSlice is an alias for a slice of pointers to NodeProcessReq.
	// This should almost always be used instead of []NodeProcessReq.
	NodeProcessReqSlice []*NodeProcessReq
	// NodeProcessReqHook is the signature for custom NodeProcessReq hook methods
	NodeProcessReqHook func(context.Context, boil.ContextExecutor, *NodeProcessReq) error

	nodeProcessReqQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodeProcessReqType                 = reflect.TypeOf(&NodeProcessReq{})
	nodeProcessReqMapping              = queries.MakeStructMapping(nodeProcessReqType)
	nodeProcessReqPrimaryKeyMapping, _ = queries.BindMapping(nodeProcessReqType, nodeProcessReqMapping, nodeProcessReqPrimaryKeyColumns)
	nodeProcessReqInsertCacheMut       sync.RWMutex
	nodeProcessReqInsertCache          = make(map[string]insertCache)
	nodeProcessReqUpdateCacheMut       sync.RWMutex
	nodeProcessReqUpdateCache          = make(map[string]updateCache)
	nodeProcessReqUpsertCacheMut       sync.RWMutex
	nodeProcessReqUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nodeProcessReqBeforeInsertHooks []NodeProcessReqHook
var nodeProcessReqBeforeUpdateHooks []NodeProcessReqHook
var nodeProcessReqBeforeDeleteHooks []NodeProcessReqHook
var nodeProcessReqBeforeUpsertHooks []NodeProcessReqHook

var nodeProcessReqAfterInsertHooks []NodeProcessReqHook
var nodeProcessReqAfterSelectHooks []NodeProcessReqHook
var nodeProcessReqAfterUpdateHooks []NodeProcessReqHook
var nodeProcessReqAfterDeleteHooks []NodeProcessReqHook
var nodeProcessReqAfterUpsertHooks []NodeProcessReqHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NodeProcessReq) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NodeProcessReq) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NodeProcessReq) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NodeProcessReq) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NodeProcessReq) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NodeProcessReq) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NodeProcessReq) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NodeProcessReq) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NodeProcessReq) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeProcessReqAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNodeProcessReqHook registers your hook function for all future operations.
func AddNodeProcessReqHook(hookPoint boil.HookPoint, nodeProcessReqHook NodeProcessReqHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nodeProcessReqBeforeInsertHooks = append(nodeProcessReqBeforeInsertHooks, nodeProcessReqHook)
	case boil.BeforeUpdateHook:
		nodeProcessReqBeforeUpdateHooks = append(nodeProcessReqBeforeUpdateHooks, nodeProcessReqHook)
	case boil.BeforeDeleteHook:
		nodeProcessReqBeforeDeleteHooks = append(nodeProcessReqBeforeDeleteHooks, nodeProcessReqHook)
	case boil.BeforeUpsertHook:
		nodeProcessReqBeforeUpsertHooks = append(nodeProcessReqBeforeUpsertHooks, nodeProcessReqHook)
	case boil.AfterInsertHook:
		nodeProcessReqAfterInsertHooks = append(nodeProcessReqAfterInsertHooks, nodeProcessReqHook)
	case boil.AfterSelectHook:
		nodeProcessReqAfterSelectHooks = append(nodeProcessReqAfterSelectHooks, nodeProcessReqHook)
	case boil.AfterUpdateHook:
		nodeProcessReqAfterUpdateHooks = append(nodeProcessReqAfterUpdateHooks, nodeProcessReqHook)
	case boil.AfterDeleteHook:
		nodeProcessReqAfterDeleteHooks = append(nodeProcessReqAfterDeleteHooks, nodeProcessReqHook)
	case boil.AfterUpsertHook:
		nodeProcessReqAfterUpsertHooks = append(nodeProcessReqAfterUpsertHooks, nodeProcessReqHook)
	}
}

// One returns a single nodeProcessReq record from the query.
func (q nodeProcessReqQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NodeProcessReq, error) {
	o := &NodeProcessReq{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for node_process_reqs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NodeProcessReq records from the query.
func (q nodeProcessReqQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodeProcessReqSlice, error) {
	var o []*NodeProcessReq

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NodeProcessReq slice")
	}

	if len(nodeProcessReqAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NodeProcessReq records in the query.
func (q nodeProcessReqQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count node_process_reqs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nodeProcessReqQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if node_process_reqs exists")
	}

	return count > 0, nil
}

// Node pointed to by the foreign key.
func (o *NodeProcessReq) Node(mods ...qm.QueryMod) nodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NodeID),
	}

	queryMods = append(queryMods, mods...)

	query := Nodes(queryMods...)
	queries.SetFrom(query.Query, "\"nodes\"")

	return query
}

// LoadNode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nodeProcessReqL) LoadNode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNodeProcessReq interface{}, mods queries.Applicator) error {
	var slice []*NodeProcessReq
	var object *NodeProcessReq

	if singular {
		object = maybeNodeProcessReq.(*NodeProcessReq)
	} else {
		slice = *maybeNodeProcessReq.(*[]*NodeProcessReq)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeProcessReqR{}
		}
		args = append(args, object.NodeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeProcessReqR{}
			}

			for _, a := range args {
				if a == obj.NodeID {
					continue Outer
				}
			}

			args = append(args, obj.NodeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`nodes`),
		qm.WhereIn(`nodes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Node")
	}

	var resultSlice []*Node
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Node")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for nodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nodes")
	}

	if len(nodeProcessReqAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Node = foreign
		if foreign.R == nil {
			foreign.R = &nodeR{}
		}
		foreign.R.NodeProcessReqs = append(foreign.R.NodeProcessReqs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NodeID == foreign.ID {
				local.R.Node = foreign
				if foreign.R == nil {
					foreign.R = &nodeR{}
				}
				foreign.R.NodeProcessReqs = append(foreign.R.NodeProcessReqs, local)
				break
			}
		}
	}

	return nil
}

// SetNode of the nodeProcessReq to the related item.
// Sets o.R.Node to related.
// Adds o to related.R.NodeProcessReqs.
func (o *NodeProcessReq) SetNode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Node) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"node_process_reqs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"node_id"}),
		strmangle.WhereClause("\"", "\"", 2, nodeProcessReqPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NodeID = related.ID
	if o.R == nil {
		o.R = &nodeProcessReqR{
			Node: related,
		}
	} else {
		o.R.Node = related
	}

	if related.R == nil {
		related.R = &nodeR{
			NodeProcessReqs: NodeProcessReqSlice{o},
		}
	} else {
		related.R.NodeProcessReqs = append(related.R.NodeProcessReqs, o)
	}

	return nil
}

// NodeProcessReqs retrieves all the records using an executor.
func NodeProcessReqs(mods ...qm.QueryMod) nodeProcessReqQuery {
	mods = append(mods, qm.From("\"node_process_reqs\""))
	return nodeProcessReqQuery{NewQuery(mods...)}
}

// FindNodeProcessReq retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNodeProcessReq(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*NodeProcessReq, error) {
	nodeProcessReqObj := &NodeProcessReq{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"node_process_reqs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nodeProcessReqObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from node_process_reqs")
	}

	if err = nodeProcessReqObj.doAfterSelectHooks(ctx, exec); err != nil {
		return nodeProcessReqObj, err
	}

	return nodeProcessReqObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NodeProcessReq) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no node_process_reqs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeProcessReqColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodeProcessReqInsertCacheMut.RLock()
	cache, cached := nodeProcessReqInsertCache[key]
	nodeProcessReqInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodeProcessReqAllColumns,
			nodeProcessReqColumnsWithDefault,
			nodeProcessReqColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nodeProcessReqType, nodeProcessReqMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodeProcessReqType, nodeProcessReqMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"node_process_reqs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"node_process_reqs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into node_process_reqs")
	}

	if !cached {
		nodeProcessReqInsertCacheMut.Lock()
		nodeProcessReqInsertCache[key] = cache
		nodeProcessReqInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NodeProcessReq.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NodeProcessReq) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nodeProcessReqUpdateCacheMut.RLock()
	cache, cached := nodeProcessReqUpdateCache[key]
	nodeProcessReqUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodeProcessReqAllColumns,
			nodeProcessReqPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update node_process_reqs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"node_process_reqs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nodeProcessReqPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodeProcessReqType, nodeProcessReqMapping, append(wl, nodeProcessReqPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update node_process_reqs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for node_process_reqs")
	}

	if !cached {
		nodeProcessReqUpdateCacheMut.Lock()
		nodeProcessReqUpdateCache[key] = cache
		nodeProcessReqUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nodeProcessReqQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for node_process_reqs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for node_process_reqs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodeProcessReqSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeProcessReqPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"node_process_reqs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nodeProcessReqPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nodeProcessReq slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nodeProcessReq")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NodeProcessReq) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no node_process_reqs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeProcessReqColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nodeProcessReqUpsertCacheMut.RLock()
	cache, cached := nodeProcessReqUpsertCache[key]
	nodeProcessReqUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			nodeProcessReqAllColumns,
			nodeProcessReqColumnsWithDefault,
			nodeProcessReqColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			nodeProcessReqAllColumns,
			nodeProcessReqPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert node_process_reqs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(nodeProcessReqPrimaryKeyColumns))
			copy(conflict, nodeProcessReqPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"node_process_reqs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(nodeProcessReqType, nodeProcessReqMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nodeProcessReqType, nodeProcessReqMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert node_process_reqs")
	}

	if !cached {
		nodeProcessReqUpsertCacheMut.Lock()
		nodeProcessReqUpsertCache[key] = cache
		nodeProcessReqUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NodeProcessReq record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NodeProcessReq) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NodeProcessReq provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodeProcessReqPrimaryKeyMapping)
	sql := "DELETE FROM \"node_process_reqs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from node_process_reqs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for node_process_reqs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nodeProcessReqQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nodeProcessReqQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from node_process_reqs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_process_reqs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodeProcessReqSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nodeProcessReqBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeProcessReqPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"node_process_reqs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nodeProcessReqPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodeProcessReq slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_process_reqs")
	}

	if len(nodeProcessReqAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NodeProcessReq) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNodeProcessReq(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodeProcessReqSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodeProcessReqSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeProcessReqPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"node_process_reqs\".* FROM \"node_process_reqs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nodeProcessReqPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NodeProcessReqSlice")
	}

	*o = slice

	return nil
}

// NodeProcessReqExists checks if the NodeProcessReq row exists.
func NodeProcessReqExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"node_process_reqs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if node_process_reqs exists")
	}

	return exists, nil
}

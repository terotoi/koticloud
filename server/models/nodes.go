// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Node is an object representing the database table.
type Node struct {
	ID             int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	Size           null.Int64   `boil:"size" json:"size,omitempty" toml:"size" yaml:"size,omitempty"`
	Type           string       `boil:"type" json:"type" toml:"type" yaml:"type"`
	MimeType       string       `boil:"mime_type" json:"mime_type" toml:"mime_type" yaml:"mime_type"`
	OwnerID        null.Int     `boil:"owner_id" json:"owner_id,omitempty" toml:"owner_id" yaml:"owner_id,omitempty"`
	ParentID       null.Int     `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	ModifiedOn     time.Time    `boil:"modified_on" json:"modified_on" toml:"modified_on" yaml:"modified_on"`
	HasCustomThumb bool         `boil:"has_custom_thumb" json:"has_custom_thumb" toml:"has_custom_thumb" yaml:"has_custom_thumb"`
	Length         null.Float64 `boil:"length" json:"length,omitempty" toml:"length" yaml:"length,omitempty"`

	R *nodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodeColumns = struct {
	ID             string
	Name           string
	Size           string
	Type           string
	MimeType       string
	OwnerID        string
	ParentID       string
	ModifiedOn     string
	HasCustomThumb string
	Length         string
}{
	ID:             "id",
	Name:           "name",
	Size:           "size",
	Type:           "type",
	MimeType:       "mime_type",
	OwnerID:        "owner_id",
	ParentID:       "parent_id",
	ModifiedOn:     "modified_on",
	HasCustomThumb: "has_custom_thumb",
	Length:         "length",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var NodeWhere = struct {
	ID             whereHelperint
	Name           whereHelperstring
	Size           whereHelpernull_Int64
	Type           whereHelperstring
	MimeType       whereHelperstring
	OwnerID        whereHelpernull_Int
	ParentID       whereHelpernull_Int
	ModifiedOn     whereHelpertime_Time
	HasCustomThumb whereHelperbool
	Length         whereHelpernull_Float64
}{
	ID:             whereHelperint{field: "\"nodes\".\"id\""},
	Name:           whereHelperstring{field: "\"nodes\".\"name\""},
	Size:           whereHelpernull_Int64{field: "\"nodes\".\"size\""},
	Type:           whereHelperstring{field: "\"nodes\".\"type\""},
	MimeType:       whereHelperstring{field: "\"nodes\".\"mime_type\""},
	OwnerID:        whereHelpernull_Int{field: "\"nodes\".\"owner_id\""},
	ParentID:       whereHelpernull_Int{field: "\"nodes\".\"parent_id\""},
	ModifiedOn:     whereHelpertime_Time{field: "\"nodes\".\"modified_on\""},
	HasCustomThumb: whereHelperbool{field: "\"nodes\".\"has_custom_thumb\""},
	Length:         whereHelpernull_Float64{field: "\"nodes\".\"length\""},
}

// NodeRels is where relationship names are stored.
var NodeRels = struct {
	Owner           string
	Parent          string
	Infos           string
	Meta            string
	NodeProcessReqs string
	ParentNodes     string
	RootUsers       string
}{
	Owner:           "Owner",
	Parent:          "Parent",
	Infos:           "Infos",
	Meta:            "Meta",
	NodeProcessReqs: "NodeProcessReqs",
	ParentNodes:     "ParentNodes",
	RootUsers:       "RootUsers",
}

// nodeR is where relationships are stored.
type nodeR struct {
	Owner           *User               `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Parent          *Node               `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	Infos           InfoSlice           `boil:"Infos" json:"Infos" toml:"Infos" yaml:"Infos"`
	Meta            MetumSlice          `boil:"Meta" json:"Meta" toml:"Meta" yaml:"Meta"`
	NodeProcessReqs NodeProcessReqSlice `boil:"NodeProcessReqs" json:"NodeProcessReqs" toml:"NodeProcessReqs" yaml:"NodeProcessReqs"`
	ParentNodes     NodeSlice           `boil:"ParentNodes" json:"ParentNodes" toml:"ParentNodes" yaml:"ParentNodes"`
	RootUsers       UserSlice           `boil:"RootUsers" json:"RootUsers" toml:"RootUsers" yaml:"RootUsers"`
}

// NewStruct creates a new relationship struct
func (*nodeR) NewStruct() *nodeR {
	return &nodeR{}
}

// nodeL is where Load methods for each relationship are stored.
type nodeL struct{}

var (
	nodeAllColumns            = []string{"id", "name", "size", "type", "mime_type", "owner_id", "parent_id", "modified_on", "has_custom_thumb", "length"}
	nodeColumnsWithoutDefault = []string{"name", "size", "type", "mime_type", "owner_id", "parent_id", "length"}
	nodeColumnsWithDefault    = []string{"id", "modified_on", "has_custom_thumb"}
	nodePrimaryKeyColumns     = []string{"id"}
)

type (
	// NodeSlice is an alias for a slice of pointers to Node.
	// This should generally be used opposed to []Node.
	NodeSlice []*Node
	// NodeHook is the signature for custom Node hook methods
	NodeHook func(context.Context, boil.ContextExecutor, *Node) error

	nodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodeType                 = reflect.TypeOf(&Node{})
	nodeMapping              = queries.MakeStructMapping(nodeType)
	nodePrimaryKeyMapping, _ = queries.BindMapping(nodeType, nodeMapping, nodePrimaryKeyColumns)
	nodeInsertCacheMut       sync.RWMutex
	nodeInsertCache          = make(map[string]insertCache)
	nodeUpdateCacheMut       sync.RWMutex
	nodeUpdateCache          = make(map[string]updateCache)
	nodeUpsertCacheMut       sync.RWMutex
	nodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nodeBeforeInsertHooks []NodeHook
var nodeBeforeUpdateHooks []NodeHook
var nodeBeforeDeleteHooks []NodeHook
var nodeBeforeUpsertHooks []NodeHook

var nodeAfterInsertHooks []NodeHook
var nodeAfterSelectHooks []NodeHook
var nodeAfterUpdateHooks []NodeHook
var nodeAfterDeleteHooks []NodeHook
var nodeAfterUpsertHooks []NodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Node) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Node) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Node) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Node) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Node) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Node) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Node) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Node) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Node) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNodeHook registers your hook function for all future operations.
func AddNodeHook(hookPoint boil.HookPoint, nodeHook NodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nodeBeforeInsertHooks = append(nodeBeforeInsertHooks, nodeHook)
	case boil.BeforeUpdateHook:
		nodeBeforeUpdateHooks = append(nodeBeforeUpdateHooks, nodeHook)
	case boil.BeforeDeleteHook:
		nodeBeforeDeleteHooks = append(nodeBeforeDeleteHooks, nodeHook)
	case boil.BeforeUpsertHook:
		nodeBeforeUpsertHooks = append(nodeBeforeUpsertHooks, nodeHook)
	case boil.AfterInsertHook:
		nodeAfterInsertHooks = append(nodeAfterInsertHooks, nodeHook)
	case boil.AfterSelectHook:
		nodeAfterSelectHooks = append(nodeAfterSelectHooks, nodeHook)
	case boil.AfterUpdateHook:
		nodeAfterUpdateHooks = append(nodeAfterUpdateHooks, nodeHook)
	case boil.AfterDeleteHook:
		nodeAfterDeleteHooks = append(nodeAfterDeleteHooks, nodeHook)
	case boil.AfterUpsertHook:
		nodeAfterUpsertHooks = append(nodeAfterUpsertHooks, nodeHook)
	}
}

// One returns a single node record from the query.
func (q nodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Node, error) {
	o := &Node{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Node records from the query.
func (q nodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodeSlice, error) {
	var o []*Node

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Node slice")
	}

	if len(nodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Node records in the query.
func (q nodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nodes exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *Node) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Parent pointed to by the foreign key.
func (o *Node) Parent(mods ...qm.QueryMod) nodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	query := Nodes(queryMods...)
	queries.SetFrom(query.Query, "\"nodes\"")

	return query
}

// Infos retrieves all the info's Infos with an executor.
func (o *Node) Infos(mods ...qm.QueryMod) infoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"infos\".\"node_id\"=?", o.ID),
	)

	query := Infos(queryMods...)
	queries.SetFrom(query.Query, "\"infos\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"infos\".*"})
	}

	return query
}

// Meta retrieves all the metum's Meta with an executor.
func (o *Node) Meta(mods ...qm.QueryMod) metumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"meta\".\"node_id\"=?", o.ID),
	)

	query := Meta(queryMods...)
	queries.SetFrom(query.Query, "\"meta\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"meta\".*"})
	}

	return query
}

// NodeProcessReqs retrieves all the node_process_req's NodeProcessReqs with an executor.
func (o *Node) NodeProcessReqs(mods ...qm.QueryMod) nodeProcessReqQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"node_process_reqs\".\"node_id\"=?", o.ID),
	)

	query := NodeProcessReqs(queryMods...)
	queries.SetFrom(query.Query, "\"node_process_reqs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"node_process_reqs\".*"})
	}

	return query
}

// ParentNodes retrieves all the node's Nodes with an executor via parent_id column.
func (o *Node) ParentNodes(mods ...qm.QueryMod) nodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"nodes\".\"parent_id\"=?", o.ID),
	)

	query := Nodes(queryMods...)
	queries.SetFrom(query.Query, "\"nodes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"nodes\".*"})
	}

	return query
}

// RootUsers retrieves all the user's Users with an executor via root_id column.
func (o *Node) RootUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"root_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nodeL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		if !queries.IsNil(object.OwnerID) {
			args = append(args, object.OwnerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OwnerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OwnerID) {
				args = append(args, obj.OwnerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(nodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerNodes = append(foreign.R.OwnerNodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OwnerID, foreign.ID) {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerNodes = append(foreign.R.OwnerNodes, local)
				break
			}
		}
	}

	return nil
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nodeL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		if !queries.IsNil(object.ParentID) {
			args = append(args, object.ParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentID) {
				args = append(args, obj.ParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`nodes`),
		qm.WhereIn(`nodes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Node")
	}

	var resultSlice []*Node
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Node")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for nodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nodes")
	}

	if len(nodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &nodeR{}
		}
		foreign.R.ParentNodes = append(foreign.R.ParentNodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &nodeR{}
				}
				foreign.R.ParentNodes = append(foreign.R.ParentNodes, local)
				break
			}
		}
	}

	return nil
}

// LoadInfos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nodeL) LoadInfos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`infos`),
		qm.WhereIn(`infos.node_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load infos")
	}

	var resultSlice []*Info
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice infos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on infos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for infos")
	}

	if len(infoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Infos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &infoR{}
			}
			foreign.R.Node = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NodeID {
				local.R.Infos = append(local.R.Infos, foreign)
				if foreign.R == nil {
					foreign.R = &infoR{}
				}
				foreign.R.Node = local
				break
			}
		}
	}

	return nil
}

// LoadMeta allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nodeL) LoadMeta(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`meta`),
		qm.WhereIn(`meta.node_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load meta")
	}

	var resultSlice []*Metum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice meta")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on meta")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta")
	}

	if len(metumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Meta = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &metumR{}
			}
			foreign.R.Node = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NodeID {
				local.R.Meta = append(local.R.Meta, foreign)
				if foreign.R == nil {
					foreign.R = &metumR{}
				}
				foreign.R.Node = local
				break
			}
		}
	}

	return nil
}

// LoadNodeProcessReqs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nodeL) LoadNodeProcessReqs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`node_process_reqs`),
		qm.WhereIn(`node_process_reqs.node_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load node_process_reqs")
	}

	var resultSlice []*NodeProcessReq
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice node_process_reqs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on node_process_reqs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for node_process_reqs")
	}

	if len(nodeProcessReqAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NodeProcessReqs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &nodeProcessReqR{}
			}
			foreign.R.Node = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NodeID {
				local.R.NodeProcessReqs = append(local.R.NodeProcessReqs, foreign)
				if foreign.R == nil {
					foreign.R = &nodeProcessReqR{}
				}
				foreign.R.Node = local
				break
			}
		}
	}

	return nil
}

// LoadParentNodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nodeL) LoadParentNodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`nodes`),
		qm.WhereIn(`nodes.parent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load nodes")
	}

	var resultSlice []*Node
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice nodes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on nodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nodes")
	}

	if len(nodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentNodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &nodeR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentNodes = append(local.R.ParentNodes, foreign)
				if foreign.R == nil {
					foreign.R = &nodeR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadRootUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nodeL) LoadRootUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNode interface{}, mods queries.Applicator) error {
	var slice []*Node
	var object *Node

	if singular {
		object = maybeNode.(*Node)
	} else {
		slice = *maybeNode.(*[]*Node)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.root_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RootUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Root = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RootID) {
				local.R.RootUsers = append(local.R.RootUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Root = local
				break
			}
		}
	}

	return nil
}

// SetOwner of the node to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerNodes.
func (o *Node) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, nodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OwnerID, related.ID)
	if o.R == nil {
		o.R = &nodeR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerNodes: NodeSlice{o},
		}
	} else {
		related.R.OwnerNodes = append(related.R.OwnerNodes, o)
	}

	return nil
}

// RemoveOwner relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Node) RemoveOwner(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.OwnerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("owner_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Owner = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OwnerNodes {
		if queries.Equal(o.OwnerID, ri.OwnerID) {
			continue
		}

		ln := len(related.R.OwnerNodes)
		if ln > 1 && i < ln-1 {
			related.R.OwnerNodes[i] = related.R.OwnerNodes[ln-1]
		}
		related.R.OwnerNodes = related.R.OwnerNodes[:ln-1]
		break
	}
	return nil
}

// SetParent of the node to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentNodes.
func (o *Node) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Node) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, nodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &nodeR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &nodeR{
			ParentNodes: NodeSlice{o},
		}
	} else {
		related.R.ParentNodes = append(related.R.ParentNodes, o)
	}

	return nil
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Node) RemoveParent(ctx context.Context, exec boil.ContextExecutor, related *Node) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentNodes {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentNodes)
		if ln > 1 && i < ln-1 {
			related.R.ParentNodes[i] = related.R.ParentNodes[ln-1]
		}
		related.R.ParentNodes = related.R.ParentNodes[:ln-1]
		break
	}
	return nil
}

// AddInfos adds the given related objects to the existing relationships
// of the node, optionally inserting them as new records.
// Appends related to o.R.Infos.
// Sets related.R.Node appropriately.
func (o *Node) AddInfos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Info) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NodeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"infos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"node_id"}),
				strmangle.WhereClause("\"", "\"", 2, infoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NodeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &nodeR{
			Infos: related,
		}
	} else {
		o.R.Infos = append(o.R.Infos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &infoR{
				Node: o,
			}
		} else {
			rel.R.Node = o
		}
	}
	return nil
}

// AddMeta adds the given related objects to the existing relationships
// of the node, optionally inserting them as new records.
// Appends related to o.R.Meta.
// Sets related.R.Node appropriately.
func (o *Node) AddMeta(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NodeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"meta\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"node_id"}),
				strmangle.WhereClause("\"", "\"", 2, metumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NodeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &nodeR{
			Meta: related,
		}
	} else {
		o.R.Meta = append(o.R.Meta, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &metumR{
				Node: o,
			}
		} else {
			rel.R.Node = o
		}
	}
	return nil
}

// AddNodeProcessReqs adds the given related objects to the existing relationships
// of the node, optionally inserting them as new records.
// Appends related to o.R.NodeProcessReqs.
// Sets related.R.Node appropriately.
func (o *Node) AddNodeProcessReqs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NodeProcessReq) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NodeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"node_process_reqs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"node_id"}),
				strmangle.WhereClause("\"", "\"", 2, nodeProcessReqPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NodeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &nodeR{
			NodeProcessReqs: related,
		}
	} else {
		o.R.NodeProcessReqs = append(o.R.NodeProcessReqs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &nodeProcessReqR{
				Node: o,
			}
		} else {
			rel.R.Node = o
		}
	}
	return nil
}

// AddParentNodes adds the given related objects to the existing relationships
// of the node, optionally inserting them as new records.
// Appends related to o.R.ParentNodes.
// Sets related.R.Parent appropriately.
func (o *Node) AddParentNodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Node) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"nodes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, nodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &nodeR{
			ParentNodes: related,
		}
	} else {
		o.R.ParentNodes = append(o.R.ParentNodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &nodeR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentNodes removes all previously related items of the
// node replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentNodes accordingly.
// Replaces o.R.ParentNodes with related.
// Sets related.R.Parent's ParentNodes accordingly.
func (o *Node) SetParentNodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Node) error {
	query := "update \"nodes\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentNodes {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}

		o.R.ParentNodes = nil
	}
	return o.AddParentNodes(ctx, exec, insert, related...)
}

// RemoveParentNodes relationships from objects passed in.
// Removes related items from R.ParentNodes (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *Node) RemoveParentNodes(ctx context.Context, exec boil.ContextExecutor, related ...*Node) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentNodes {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentNodes)
			if ln > 1 && i < ln-1 {
				o.R.ParentNodes[i] = o.R.ParentNodes[ln-1]
			}
			o.R.ParentNodes = o.R.ParentNodes[:ln-1]
			break
		}
	}

	return nil
}

// AddRootUsers adds the given related objects to the existing relationships
// of the node, optionally inserting them as new records.
// Appends related to o.R.RootUsers.
// Sets related.R.Root appropriately.
func (o *Node) AddRootUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RootID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"root_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RootID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &nodeR{
			RootUsers: related,
		}
	} else {
		o.R.RootUsers = append(o.R.RootUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Root: o,
			}
		} else {
			rel.R.Root = o
		}
	}
	return nil
}

// SetRootUsers removes all previously related items of the
// node replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Root's RootUsers accordingly.
// Replaces o.R.RootUsers with related.
// Sets related.R.Root's RootUsers accordingly.
func (o *Node) SetRootUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"root_id\" = null where \"root_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RootUsers {
			queries.SetScanner(&rel.RootID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Root = nil
		}

		o.R.RootUsers = nil
	}
	return o.AddRootUsers(ctx, exec, insert, related...)
}

// RemoveRootUsers relationships from objects passed in.
// Removes related items from R.RootUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.Root.
func (o *Node) RemoveRootUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RootID, nil)
		if rel.R != nil {
			rel.R.Root = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("root_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RootUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.RootUsers)
			if ln > 1 && i < ln-1 {
				o.R.RootUsers[i] = o.R.RootUsers[ln-1]
			}
			o.R.RootUsers = o.R.RootUsers[:ln-1]
			break
		}
	}

	return nil
}

// Nodes retrieves all the records using an executor.
func Nodes(mods ...qm.QueryMod) nodeQuery {
	mods = append(mods, qm.From("\"nodes\""))
	return nodeQuery{NewQuery(mods...)}
}

// FindNode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNode(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Node, error) {
	nodeObj := &Node{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nodes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nodes")
	}

	return nodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Node) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nodes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodeInsertCacheMut.RLock()
	cache, cached := nodeInsertCache[key]
	nodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodeAllColumns,
			nodeColumnsWithDefault,
			nodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nodeType, nodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodeType, nodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nodes")
	}

	if !cached {
		nodeInsertCacheMut.Lock()
		nodeInsertCache[key] = cache
		nodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Node.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Node) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nodeUpdateCacheMut.RLock()
	cache, cached := nodeUpdateCache[key]
	nodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodeAllColumns,
			nodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodeType, nodeMapping, append(wl, nodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nodes")
	}

	if !cached {
		nodeUpdateCacheMut.Lock()
		nodeUpdateCache[key] = cache
		nodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in node slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all node")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Node) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nodes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nodeUpsertCacheMut.RLock()
	cache, cached := nodeUpsertCache[key]
	nodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			nodeAllColumns,
			nodeColumnsWithDefault,
			nodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			nodeAllColumns,
			nodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert nodes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(nodePrimaryKeyColumns))
			copy(conflict, nodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"nodes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(nodeType, nodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nodeType, nodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert nodes")
	}

	if !cached {
		nodeUpsertCacheMut.Lock()
		nodeUpsertCache[key] = cache
		nodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Node record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Node) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Node provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodePrimaryKeyMapping)
	sql := "DELETE FROM \"nodes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from node slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nodes")
	}

	if len(nodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Node) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nodes\".* FROM \"nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NodeSlice")
	}

	*o = slice

	return nil
}

// NodeExists checks if the Node row exists.
func NodeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nodes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nodes exists")
	}

	return exists, nil
}
